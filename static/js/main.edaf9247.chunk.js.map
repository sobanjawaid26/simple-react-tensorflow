{"version":3,"sources":["Tensorflow.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TensorflowExample","useState","x","y","valuePairsState","setValuePairsState","handleValuePairChange","e","updatedValuePairs","update","target","dataset","index","name","$set","parseInt","value","model","trained","predictedValue","valueToPredict","modelState","setModelState","className","map","val","key","data-index","onChange","type","pattern","onClick","xValues","yValues","forEach","push","tf","add","dense","units","inputShape","compile","loss","optimizer","xs","length","ys","fit","epochs","then","placeholder","predict","arraySync","disabled","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.edaf9247.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport update from 'immutability-helper';\nimport * as tf from '@tensorflow/tfjs';\n\nimport './Tensorflow.css'\n\n\nimport  { useState } from 'react';\n\nconst TensorflowExample = () => {\n    //Value pairs state\nconst [valuePairsState, setValuePairsState] = useState([\n    { x: -1, y: -3 },\n    { x: 0, y: -1 },\n    { x: 1, y: 1 },\n    { x: 2, y: 3 },\n    { x: 3, y: 5 },\n    { x: 4, y: 7 },\n]);\n\n//Event handlers\nconst handleValuePairChange = (e) => {\n    const updatedValuePairs = update(valuePairsState, {\n        [e.target.dataset.index]: {\n            [e.target.name]: { $set: parseInt(e.target.value) }\n        }\n    })\n\n    setValuePairsState(\n        updatedValuePairs\n    )\n};\n\nconst handleAddItem = () => {\n    setValuePairsState([\n        ...valuePairsState,\n        { x: 1, y: 1 }\n    ]);\n};\n\nconst handleModelChange = (e) => setModelState({\n    ...modelState,\n    [e.target.name]: [parseInt(e.target.value)],\n});\n\n//Define the model state\nconst [modelState, setModelState] = useState({\n    model: null,\n    trained: false,\n    predictedValue: 'Click on train!',\n    valueToPredict: 1,\n});\nconst handleTrainModel = () => {\n    let xValues = [],\n        yValues = [];\n\n    valuePairsState.forEach((val, index) => {\n        xValues.push(val.x);\n        yValues.push(val.y);\n    });\n\n    // Define a model for linear regression.\n    const model = tf.sequential();\n    model.add(tf.layers.dense({ units: 1, inputShape: [1] }));\n\n    // Prepare the model for training: Specify the loss and the optimizer.\n    model.compile({ loss: 'meanSquaredError', optimizer: 'sgd' });\n    const xs = tf.tensor2d(xValues, [xValues.length, 1]);\n    const ys = tf.tensor2d(yValues, [yValues.length, 1]);\n\n    // Train the model using the data.\n    model.fit(xs, ys, { epochs: 250 }).then(() => {\n        setModelState({\n            ...modelState,\n            model: model,\n            trained: true,\n            predictedValue: 'Ready for making predictions',\n        });\n    });\n}\nconst handlePredict = () => {\n    // Use the model to do inference on a data point the model hasn't seen before:\n    const predictedValue = modelState.model.predict(tf.tensor2d([modelState.valueToPredict], [1, 1])).arraySync()[0][0];\n\n    setModelState({\n        ...modelState,\n        predictedValue: predictedValue,\n    });\n}\n    return (\n        <div className=\"tensorflow-example\">\n        <div className=\"train-controls\">\n    <h2 className=\"section\">Training Data (x,y) pairs</h2>\n    <div className=\"row labels\">\n        <div className=\"field-label column\">X</div>\n        <div className=\"field-label column\">Y</div>\n    </div>\n\n    {valuePairsState.map((val, index) => {\n        return (\n            <div key={index} className=\"row\">\n                <input\n                    className=\"field field-x column\"\n                    value={val.x}\n                    name=\"x\"\n                    data-index={index}\n                    onChange={handleValuePairChange}\n                    type=\"number\" pattern=\"[0-9]*\" />\n                <input\n                    className=\"field field-y column\"\n                    value={val.y}\n                    name=\"y\"\n                    data-index={index}\n                    onChange={handleValuePairChange}\n                    type=\"number\" />\n            </div>\n        );\n    })}\n\n    <button\n        className=\"button-add-example button--green\"\n        onClick={handleAddItem}>\n        +\n    </button>\n    <button\n        className=\"button-train button--green\"\n        onClick={handleTrainModel}>\n        Train\n    </button>\n</div><div className=\"predict-controls\">\n    <h2 className=\"section\">Predicting</h2>\n    <input\n        className=\"field element\"\n        value={modelState.valueToPredict}\n        name=\"valueToPredict\"\n        onChange={handleModelChange}\n        type=\"number\"\n        placeholder=\"Enter an integer number\" /><br />\n    <div className=\"element\">\n        {modelState.predictedValue}\n    </div>\n    <button\n        className=\"element button--green\"\n        onClick={handlePredict}\n        disabled={!modelState.trained}>\n        Predict\n    </button>\n</div>\n        </div>\n    );\n};\n\nexport default TensorflowExample;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Tensorflow from './Tensorflow';\n\nclass App extends React.Component  {\n  render(){ \n    return (\n    <div>\n        <Tensorflow />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}